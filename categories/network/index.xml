<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>network on jason's 博客</title><link>https://jasonrd.github.io/blog/categories/network/</link><description>Recent content in network on jason's 博客</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 01 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jasonrd.github.io/blog/categories/network/index.xml" rel="self" type="application/rss+xml"/><item><title>云上 pod 下线引起短时服务不可用</title><link>https://jasonrd.github.io/blog/p/service-cause-failure/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>https://jasonrd.github.io/blog/p/service-cause-failure/</guid><description>&lt;img src="https://jasonrd.github.io/blog/p/service-cause-failure/luca-bravo-alS7ewQ41M8-unsplash.jpg" alt="Featured image of post 云上 pod 下线引起短时服务不可用" />&lt;h2 id="1-背景">1. 背景&lt;/h2>
&lt;p>近日，接连收到多个云上站点业务出现 502 问题反馈：&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/502-error-1.png"
width="2980"
height="934"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/502-error-1_hucce7954739b6677286789b82e0e95e76_227221_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/502-error-1_hucce7954739b6677286789b82e0e95e76_227221_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="502-error-1"
class="gallery-image"
data-flex-grow="319"
data-flex-basis="765px"
>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/502-error-2.png"
width="1858"
height="1096"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/502-error-2_hub2cf4d7668d03fc5d2263866213f9d32_182813_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/502-error-2_hub2cf4d7668d03fc5d2263866213f9d32_182813_1024x0_resize_box_3.png 1024w"
loading="lazy"
alt="502-error-2"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="406px"
>&lt;/p>
&lt;p>和业务负责人沟通后，应用确认加入了优雅下线逻辑。&lt;/p>
&lt;h2 id="2-排查过程">2. 排查过程&lt;/h2>
&lt;p>首先，查看网关日志：&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-1.png"
width="2848"
height="364"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-1_hu34d8d5f831126b5a732d35045ac8e4b8_1033303_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-1_hu34d8d5f831126b5a732d35045ac8e4b8_1033303_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="782"
data-flex-basis="1877px"
>&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-2.png"
width="2812"
height="386"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-2_huc895b7a875e203a5b190847dbae686e8_916199_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-2_huc895b7a875e203a5b190847dbae686e8_916199_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="728"
data-flex-basis="1748px"
>&lt;/p>
&lt;p>两次日志，都是请求 LB IP 出现 503 错误码后，然后网关将 LB IP 摘掉。&lt;/p>
&lt;p>分析为什么出现 503 错误码前，先了解一下容器下线逻辑：容器进行下线时，会调用 prestop 脚本执行下线前的操作。&lt;/p>
&lt;p>在 prestop 脚本中，首先 sleep 15s （不要问我为什么），然后调用 http://127.0.0.1:${APP_PORT}/ok.htm?down=true 接口通知 java 进程进行优雅下线。该接口调用成功后，再请求应用 ok 页面，进入下面逻辑：&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-prestop.png"
width="1055"
height="614"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-prestop_hu07c34cbbf302e9275effdebb12b729a9_402200_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-prestop_hu07c34cbbf302e9275effdebb12b729a9_402200_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="412px"
>&lt;/p>
&lt;p>也就是返回 halting 数据和503状态码。&lt;/p>
&lt;p>k8s 中在将 Pod 进行下线（标记为 Terminating 状态）时，k8s endpoint controller 就将该 Pod ip 从 lb 或 service 后端列表中摘除。既然 lb/svc 已经将在该 pod IP 摘除，为什么仍然请求到 halting Pod 呢？&lt;/p>
&lt;p>在进入应用容器中进行抓包，并和应用负责人确认后，网关 -&amp;gt; lb -&amp;gt; pod 是使用 http 长连接方式。&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-netflow.png"
width="1762"
height="788"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-netflow_hu2cc8ce7b54497507118a4db625573fcb_324383_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-netflow_hu2cc8ce7b54497507118a4db625573fcb_324383_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="536px"
>&lt;/p>
&lt;p>在 Pod 处于 terminating 状态时，通过 svc 请求时新建立的连接将不会转发到该 pod，但是已经建立的连接在 Pod 完全删除前仍可继续通信。所以，虽然 service 将 Pod IP 摘除，但是为了保证容器的优雅下线，已经建立的连接仍然可以继续处理业务，直到容器彻底被删除。&lt;/p>
&lt;p>我们用 python 简单写了一个使用 http 长连接客户端，进行一下测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">requests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">client&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">requests&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">session&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">headers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s1">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;application/json&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;Connection&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;keep-alive&amp;#39;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">r&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">client&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://xx.xx.16.137:8088/ok.htm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">headers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">headers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># xx.xx.16.137 为应用 lb IP &lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">status_code&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">time&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>python client 请求应用容器：&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-3.png"
width="1770"
height="592"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-3_hu29f5ad8b11850c039f2c666148aa389d_770926_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-3_hu29f5ad8b11850c039f2c666148aa389d_770926_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="298"
data-flex-basis="717px"
>&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-4.png"
width="1772"
height="570"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-4_hu7194f66dd6011e9b2627f0ff6ec5b69b_848304_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-4_hu7194f66dd6011e9b2627f0ff6ec5b69b_848304_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="310"
data-flex-basis="746px"
>&lt;/p>
&lt;p>上面可以看到，在 15:30:06 将 pod 进行 kill 后，通过长连接仍然可以将请求转发到处于 terminating 的应用容器。直到 15s 后调用下线接口，请求返回 503。请求处于 halting 状态的 pod，server 端会主动 close 请求：&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-5.png"
width="1298"
height="580"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-5_hub914d7d26274e94e5b363dd62be85e28_370469_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/troubleshoot-5_hub914d7d26274e94e5b363dd62be85e28_370469_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="223"
data-flex-basis="537px"
>&lt;/p>
&lt;p>另外，我们测试应用只有单个实例，也就是实例被删除后，lb 后端实例为 0，请求 lb 的新连接无法建立。所以，测试脚本会出现 connect refused 报错。&lt;/p>
&lt;h2 id="3-解决方法">3. 解决方法&lt;/h2>
&lt;p>综上可知，问题原因是 kill pod 后仍然会有流量进入到 terminating 状态的 pod，然后 15s 后 prestop 脚本通知进程进行下线逻辑（也就是 ok 页面返回 halting 和 503 状态码），当网关继续请求到该 pod 就会认为 lb 出现异常，将唯一的 lb 标记为不健康，从而出现 502 异常。&lt;/p>
&lt;p>其他站点未出现该问题原因是：网关直接转发到 pod ip，摘掉的是出现异常的 pod ip 。而有问题的站点对接的只是一个公有云 LB ip。&lt;/p>
&lt;p>&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-1.png"
width="888"
height="768"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-1_huf2a69d255e32c6a8b07aa332757aa208_267530_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-1_huf2a69d255e32c6a8b07aa332757aa208_267530_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="115"
data-flex-basis="277px"
>&lt;/p>
&lt;p>具体优化逻辑如下(如上图，针对单个pod):&lt;/p>
&lt;ol>
&lt;li>应用增加 connection filter，在应用进入优雅下线（被调用 http://127.0.0.1:${APP_PORT}/ok.htm?down=true）后，所有请求的 http 响应头中增加 connection:close（也就是使用短连接）；
&lt;ol>
&lt;li>因为 pod 处于 terminating 时，新连接不会进入该 pod；&lt;/li>
&lt;li>参考代码如下：
&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-2.png"
width="1738"
height="1016"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-2_hu8faba495cdcf5af6c2ac4f3e2d23be71_653499_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-2_hu8faba495cdcf5af6c2ac4f3e2d23be71_653499_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="171"
data-flex-basis="410px"
>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>健康检查接口，修改为去掉 503 异常，避免网关检测到 503 异常时，直接摘掉 lb ip。
&lt;ol>
&lt;li>参考代码如下：
&lt;img src="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-3.png"
width="1482"
height="696"
srcset="https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-3_hu095a7d17af90f9d81e0a9c0715e7a55d_439334_480x0_resize_box_3.png 480w, https://jasonrd.github.io/blog/blog/p/service-cause-failure/img/solution-3_hu095a7d17af90f9d81e0a9c0715e7a55d_439334_1024x0_resize_box_3.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="212"
data-flex-basis="511px"
>&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol></description></item></channel></rss>